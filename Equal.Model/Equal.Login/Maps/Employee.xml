<?xml version="1.0" encoding="utf-8" ?>
<!--V1.0.17.0309-->
<sqlMap namespace="Employee"
        xmlns="http://ibatis.apache.org/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <alias>
    <typeAlias alias="Employee" type="Equal.Login.Domain.Employee, Equal.Model.Login" />
  </alias>

  <resultMaps>
    <resultMap id="EmployeeResult" class="Employee">
      <result property="Id" column="E_Id" />
      <result property="RelatedDomain" column="E_RelatedDomain" nullValue="" />
      <result property="RelatedDomainId" column="E_RelatedDomainId" nullValue="" />
      <result property="ChineseName" column="E_ChineseName" nullValue="" />
      <result property="Mobile" column="E_Mobile" nullValue="" />
      <result property="Email" column="E_Email" nullValue="" />
      <result property="WorkingState" column="E_WorkingState" />
    </resultMap>
  </resultMaps>

  <statements>
    <insert id="Insert" parameterClass="Employee">
      INSERT INTO EM_Employee (E_Id, E_RelatedDomain, E_RelatedDomainId, E_ChineseName, E_Mobile, E_Email, E_WorkingState, E_RecordTime)
      VALUES (#Id#, #RelatedDomain#, #RelatedDomainId#, #ChineseName#, #Mobile#, #Email#, #WorkingState#, GETDATE())
      <selectKey resultClass="long" type="post" property="Id">
        SELECT @@IDENTITY
      </selectKey>
    </insert>
    <update id="Update" parameterClass="Employee">
      UPDATE EM_Employee SET E_RelatedDomain = #RelatedDomain#, E_RelatedDomainId = #RelatedDomainId#, E_ChineseName = #ChineseName#, E_Mobile = #Mobile#, E_Email = #Email#, E_WorkingState = #WorkingState#, E_UpdateTime = GETDATE()
      WHERE E_Id = #Id#
    </update>
    <delete id="Delete" parameterClass="hashtable">
      DELETE FROM EM_Employee
      <include refid="SqlWhere" />
    </delete>
    <statement id="Truncate">
      TRUNCATE TABLE EM_Employee
    </statement>

    <sql id="SqlFrom">
      FROM EM_Employee
      <include refid="SqlJoin" />
    </sql>
    <sql id="SqlWhereBase">
      <isNotNull prepend="AND" property="Id">
        E_Id = #Id#
      </isNotNull>
      <isNotNull prepend="AND" property="Ids">
        <iterate open="(" close=")" conjunction="OR" property="Ids">
          E_Id = $Ids[]$
        </iterate>
      </isNotNull>
    </sql>
    <sql id="SqlWhere">
      <dynamic prepend="WHERE">
        <include refid="SqlWhereBase" />
        <isNotNull prepend="AND" property="RelatedDomain">
          <isNotEmpty property="RelatedDomain">
            E_RelatedDomain = #RelatedDomain#
          </isNotEmpty>
          <isEmpty property="RelatedDomain">
            (E_RelatedDomain = '' OR E_RelatedDomain IS NULL)
          </isEmpty>
        </isNotNull>
        <isNotNull prepend="AND" property="RelatedDomainId">
          <isNotEmpty property="RelatedDomainId">
            E_RelatedDomainId = #RelatedDomainId#
          </isNotEmpty>
          <isEmpty property="RelatedDomainId">
            (E_RelatedDomainId = '' OR E_RelatedDomainId IS NULL)
          </isEmpty>
        </isNotNull>
        <isNotNull prepend="AND" property="RelatedDomainIds">
          <iterate open="(" close=")" conjunction="OR" property="RelatedDomainIds">
            E_RelatedDomainId = '$RelatedDomainIds[]$'
          </iterate>
        </isNotNull>
        <include refid="SqlWhereCustom" />
      </dynamic>
    </sql>
    <sql id="SqlOrderBy">
      ORDER BY
      <isNotNull property="OrderBy">
        $OrderBy$,
      </isNotNull>
      <include refid="SqlOrderByCustom" />
      E_Id DESC
    </sql>
    <select id="SelectCount" parameterClass="hashtable" resultClass="int">
      SELECT COUNT(*)
      <include refid="SqlFrom" />
      <include refid="SqlWhere" />
    </select>
    <select id="Select" parameterClass="hashtable" resultMap="EmployeeResult">
      SELECT *
      <include refid="SqlFrom"/>
      <include refid="SqlWhere"/>
      <include refid="SqlOrderBy"/>
    </select>
    <select id="SelectTop" parameterClass="hashtable" resultMap="EmployeeResult">
      SELECT TOP $TopCount$ *
      <include refid="SqlFrom"/>
      <include refid="SqlWhere"/>
      <include refid="SqlOrderBy"/>
    </select>
    <select id="SelectByPage" parameterClass="hashtable" resultMap="EmployeeResult">
      SELECT TOP $PageSize$ *
      <include refid="SqlFrom" />
      WHERE E_Id NOT IN
      (SELECT TOP $NotInSize$ E_Id
      <include refid="SqlFrom" />
      <include refid="SqlWhere" />
      <include refid="SqlOrderBy" />
      )
      <include refid="SqlWhereBase" />
      <include refid="SqlWhereCustom" />
      <include refid="SqlOrderBy" />
    </select>
    <!--RelatedDomainBase-->
    <update id="UpdateRelated" parameterClass="hashtable">
      UPDATE EM_Employee SET E_RelatedDomain = #UpdateRelatedDomain#, E_RelatedDomainId = #UpdateRelatedDomainId#
      <include refid="SqlWhere" />
    </update>

    <!--Custom Sql Begin-->
    <sql id="SqlJoin">
    </sql>
    <sql id="SqlOrderByCustom">
    </sql>
    <sql id="SqlWhereCustom">
    </sql>
    <!--Custom Sql End-->

  </statements>

</sqlMap>