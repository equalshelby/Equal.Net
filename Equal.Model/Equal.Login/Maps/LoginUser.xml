<?xml version="1.0" encoding="utf-8" ?>
<!--V1.0.17.0309-->
<sqlMap namespace="LoginUser"
        xmlns="http://ibatis.apache.org/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <alias>
    <typeAlias alias="LoginUser" type="Equal.Login.Domain.LoginUser, Equal.Login" />
  </alias>

  <resultMaps>
    <resultMap id="LoginUserResult" class="LoginUser">
      <result property="Id" column="Lu_Id" />
      <result property="LoginName" column="Lu_LoginName" nullValue="" />
      <result property="LoginPassWord" column="Lu_LoginPassWord" nullValue="" />
      <result property="LoginType" column="Lu_LoginType" />
    </resultMap>
  </resultMaps>

  <statements>
    <insert id="Insert" parameterClass="LoginUser">
      INSERT INTO EM_LoginUser (Lu_Id, Lu_LoginName, Lu_LoginPassWord, Lu_LoginType, Lu_RecordTime)
      VALUES (#Id#, #LoginName#, #LoginPassWord#, #LoginType#, GETDATE())
      <selectKey resultClass="long" type="post" property="Id">
        SELECT Lu_Id FROM EM_LoginUser WHERE Lu_Id = #Id#
      </selectKey>
    </insert>
    <update id="Update" parameterClass="LoginUser">
      UPDATE EM_LoginUser SET Lu_LoginName = #LoginName#, Lu_LoginPassWord = #LoginPassWord#, Lu_LoginType = #LoginType#, Lu_UpdateTime = GETDATE()
      WHERE Lu_Id = #Id#
    </update>
    <delete id="Delete" parameterClass="hashtable">
      DELETE FROM EM_LoginUser
      <include refid="SqlWhere" />
    </delete>
    <statement id="Truncate">
      TRUNCATE TABLE EM_LoginUser
    </statement>

    <sql id="SqlFrom">
      FROM EM_LoginUser
      <include refid="SqlJoin" />
    </sql>
    <sql id="SqlWhereBase">
      <isNotNull prepend="AND" property="Id">
        Lu_Id = #Id#
      </isNotNull>
      <isNotNull prepend="AND" property="Ids">
        <iterate open="(" close=")" conjunction="OR" property="Ids">
          Lu_Id = $Ids[]$
        </iterate>
      </isNotNull>
    </sql>
    <sql id="SqlWhere">
      <dynamic prepend="WHERE">
        <include refid="SqlWhereBase" />
        <include refid="SqlWhereCustom" />
      </dynamic>
    </sql>
    <sql id="SqlOrderBy">
      ORDER BY
      <isNotNull property="OrderBy">
        $OrderBy$,
      </isNotNull>
      <include refid="SqlOrderByCustom" />
      Lu_Id DESC
    </sql>
    <select id="SelectCount" parameterClass="hashtable" resultClass="int">
      SELECT COUNT(*)
      <include refid="SqlFrom" />
      <include refid="SqlWhere" />
    </select>
    <select id="Select" parameterClass="hashtable" resultMap="LoginUserResult">
      SELECT *
      <include refid="SqlFrom"/>
      <include refid="SqlWhere"/>
      <include refid="SqlOrderBy"/>
    </select>
    <select id="SelectTop" parameterClass="hashtable" resultMap="LoginUserResult">
      SELECT TOP $TopCount$ *
      <include refid="SqlFrom"/>
      <include refid="SqlWhere"/>
      <include refid="SqlOrderBy"/>
    </select>
    <select id="SelectByPage" parameterClass="hashtable" resultMap="LoginUserResult">
      SELECT TOP $PageSize$ *
      <include refid="SqlFrom" />
      WHERE Lu_Id NOT IN
      (SELECT TOP $NotInSize$ Lu_Id
      <include refid="SqlFrom" />
      <include refid="SqlWhere" />
      <include refid="SqlOrderBy" />
      )
      <include refid="SqlWhereBase" />
      <include refid="SqlWhereCustom" />
      <include refid="SqlOrderBy" />
    </select>

    <!--Custom Sql Begin-->
    <sql id="SqlJoin">
    </sql>
    <sql id="SqlOrderByCustom">
    </sql>
    <sql id="SqlWhereCustom">
      <isNotNull prepend="AND" property="LoginName">
        Lu_LoginName = #LoginName#
      </isNotNull>
    </sql>
    <!--Custom Sql End-->

  </statements>

</sqlMap>