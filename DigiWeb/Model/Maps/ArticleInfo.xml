<?xml version="1.0" encoding="utf-8" ?>
<!--V1.0.17.0309-->
<sqlMap namespace="ArticleInfo"
        xmlns="http://ibatis.apache.org/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <alias>
    <typeAlias alias="ArticleInfo" type="Model.Domain.ArticleInfo, Model" />
  </alias>

  <resultMaps>
    <resultMap id="ArticleInfoResult" class="ArticleInfo">
      <result property="Id" column="Ai_Id" />
      <result property="Title" column="Ai_Title" nullValue="" />
      <result property="SubmitTime" column="Ai_SubmitTime" nullValue="" />
      <result property="SubmitUser" column="Ai_SubmitUser" nullValue="" />
      <result property="Context" column="Ai_Context" nullValue="" />
      <result property="Type" column="Ai_Type" />
      <result property="ClickCount" column="Ai_ClickCount" />
    </resultMap>
  </resultMaps>

  <statements>
    <insert id="Insert" parameterClass="ArticleInfo">
      INSERT INTO BM_ArticleInfo (Ai_Id, Ai_Title, Ai_SubmitTime, Ai_SubmitUser, Ai_Context, Ai_Type, Ai_ClickCount, Ai_RecordTime)
      VALUES (#Id#, #Title#, #SubmitTime#, #SubmitUser#, #Context#, #Type#, #ClickCount#, GETDATE())
      <selectKey resultClass="long" type="post" property="Id">
        SELECT Ai_Id FROM BM_ArticleInfo WHERE Ai_Id = #Id#
      </selectKey>
    </insert>
    <update id="Update" parameterClass="ArticleInfo">
      UPDATE BM_ArticleInfo SET Ai_Title = #Title#, Ai_SubmitTime = #SubmitTime#, Ai_SubmitUser = #SubmitUser#, Ai_Context = #Context#, Ai_Type = #Type#, Ai_ClickCount = #ClickCount#, Ai_UpdateTime = GETDATE()
      WHERE Ai_Id = #Id#
    </update>
    <delete id="Delete" parameterClass="hashtable">
      DELETE FROM BM_ArticleInfo
      <include refid="SqlWhere" />
    </delete>
    <statement id="Truncate">
      TRUNCATE TABLE BM_ArticleInfo
    </statement>

    <sql id="SqlFrom">
      FROM BM_ArticleInfo
      <include refid="SqlJoin" />
    </sql>
    <sql id="SqlWhereBase">
      <isNotNull prepend="AND" property="Id">
        Ai_Id = #Id#
      </isNotNull>
      <isNotNull prepend="AND" property="Ids">
        <iterate open="(" close=")" conjunction="OR" property="Ids">
          Ai_Id = $Ids[]$
        </iterate>
      </isNotNull>
    </sql>
    <sql id="SqlWhere">
      <dynamic prepend="WHERE">
        <include refid="SqlWhereBase" />
        <include refid="SqlWhereCustom" />
      </dynamic>
    </sql>
    <sql id="SqlOrderBy">
      ORDER BY
      <isNotNull property="OrderBy">
        $OrderBy$,
      </isNotNull>
      <include refid="SqlOrderByCustom" />
      Ai_Id DESC
    </sql>
    <select id="SelectCount" parameterClass="hashtable" resultClass="int">
      SELECT COUNT(*)
      <include refid="SqlFrom" />
      <include refid="SqlWhere" />
    </select>
    <select id="Select" parameterClass="hashtable" resultMap="ArticleInfoResult">
      SELECT *
      <include refid="SqlFrom"/>
      <include refid="SqlWhere"/>
      <include refid="SqlOrderBy"/>
    </select>
    <select id="SelectTop" parameterClass="hashtable" resultMap="ArticleInfoResult">
      SELECT TOP $TopCount$ *
      <include refid="SqlFrom"/>
      <include refid="SqlWhere"/>
      <include refid="SqlOrderBy"/>
    </select>
    <select id="SelectByPage" parameterClass="hashtable" resultMap="ArticleInfoResult">
      SELECT TOP $PageSize$ *
      <include refid="SqlFrom" />
      WHERE Ai_Id NOT IN
      (SELECT TOP $NotInSize$ Ai_Id
      <include refid="SqlFrom" />
      <include refid="SqlWhere" />
      <include refid="SqlOrderBy" />
      )
      <include refid="SqlWhereBase" />
      <include refid="SqlWhereCustom" />
      <include refid="SqlOrderBy" />
    </select>

    <!--Custom Sql Begin-->
    <sql id="SqlJoin">
    </sql>
    <sql id="SqlOrderByCustom">
    </sql>
    <sql id="SqlWhereCustom">
      <isNotNull prepend="AND" property="Type">
        Ai_Type = #Type#
      </isNotNull>
    </sql>
    <!--Custom Sql End-->

  </statements>

</sqlMap>